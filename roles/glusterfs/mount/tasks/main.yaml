- name: gather os specific variables
  ansible.builtin.include_vars: "{{ item }}"
  with_first_found:
    - "{{ ansible_distribution|lower }}.yaml"
    - "{{ ansible_os_family|lower }}.yaml"
    - default.yaml
  tags:
    - facts
- name: install gluster client package
  ansible.builtin.include_role:
    name: utils/os/package/manager
- name: update /etc/hosts
  ansible.builtin.blockinfile:
    path: /etc/hosts
    marker: "# {mark} ANSIBLE MANAGED BLOCK gluster mount role"
    block: |
      {% for glusterMount in glusterfs_mounts %}
      {%   for host in query('inventory_hostnames', glusterfs_mounts.hosts) %}
      {{ hostvars[host]['ip'] | default(hostvars[host]['ansible_host'] ,True) }} {{ host }}
      {%   endfor %}
      {% endfor %}
- name: create mount directory if necessary
  block:
    - name: get mount path stats
      ansible.builtin.stat:
        path: "{{ item.mount.path }}"
      register: p
    - name: check if recreating path is possible
      ansible.builtin.fail: |
        the mount path {{ item.mount.path }} exists but it's not a directory. and path_force_create is not set to true
      when: p.stat.exists and not p.stat.isdir and not path_force_create
    - name: remove the contents of the path
      ansible.builtin.file:
        state: absent
        path: "{{ item.mount.path }}"
    - name: ensure the mount directory is created
      ansible.builtin.file:
        state: directory
        path: "{{ item.mount.path }}"
        mode: "{{ '%04d' | format(item.mount.mode | default(755, True) | int) }}"
        owner: "{{ item.mount.owner | default('root', True) }}"
        group: "{{ item.mount.group | default('root', True) }}"
        recurse: yes
  loop: "{{ glusterfs_mounts }}"
- name: mount the mountpoint
  mount:
    name: "{{ item.mount.path }}"
    src: "{{ query('inventory_hostnames', item.hosts) | random }}:/{{ item.volume }}"
    fstype: glusterfs
    opts: "defaults,_netdev,noauto,x-systemd.automount"
    state: mounted
  loop: "{{ glusterfs_mounts }}"
