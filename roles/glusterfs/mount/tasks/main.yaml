- name: gather os specific variables
  ansible.builtin.include_vars: "{{ item }}"
  with_first_found:
    - "{{ ansible_distribution|lower }}.yaml"
    - "{{ ansible_os_family|lower }}.yaml"
    - default.yaml
  tags:
    - facts
- name: install gluster client package
  ansible.builtin.include_role:
    name: utils/os/package/manager
- name: update /etc/hosts
  ansible.builtin.blockinfile:
    path: /etc/hosts
    marker: "# {mark} ANSIBLE MANAGED BLOCK gluster mount role"
    block: |
      {% for glusterfs_mount in glusterfs_mounts %}
      {%   for host in query('inventory_hostnames', glusterfs_mount.hosts) %}
      {{ hostvars[host]['ip'] | default(hostvars[host]['ansible_host'], true) }} {{ hostvars[host]['glusterfs_hostname'] if 'glusterfs_hostname' in hostvars[host] else host }}
      {%   endfor %}
      {% endfor %}
- name: create mount directory if necessary
  include_tasks: mountpoint.yaml
  loop: "{{ glusterfs_mounts }}"
- name: set random target host
  set_fact:
    _target_hosts: "{{ (_target_hosts | default({})) | combine({item.mount.path: (query('inventory_hostnames', item.hosts) | random)}) }}"
  loop: "{{ glusterfs_mounts }}"
- name: mount the mountpoint
  mount:
    name: "{{ item.mount.path }}"
    src: "{{ hostvars[_target_hosts[item.mount.path]]['glusterfs_hostname'] if 'glusterfs_hostname' in hostvars[_target_hosts[item.mount.path]] else _target_hosts[item.mount.path] }}:/{{ item.volume }}"
    fstype: glusterfs
    opts: "defaults,_netdev,noauto,x-systemd.automount"
    state: mounted
  loop: "{{ glusterfs_mounts }}"
