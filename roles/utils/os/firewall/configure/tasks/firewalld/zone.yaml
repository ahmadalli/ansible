- name: set zone identification facts
  set_fact:
    _config_key: "{{ 'zone_' + _zone_name if (_zone_name | default('', true) | length > 0) else 'default_zone' }}"
    _is_default_zone: "{{ _zone_name | default('', true) | length == 0 }}"
  tags:
    - facts

- name: set zone configuration facts
  set_fact:
    _interfaces: "{{ query('ahmadalli.ansible.listmerge', 'firewalld_' + _config_key + '_interfaces') | unique }}"
    _sources: "{{ query('ahmadalli.ansible.listmerge', 'firewalld_' + _config_key + '_sources') | unique }}"
    _source_hosts: "{{ query('ahmadalli.ansible.listmerge', 'firewalld_' + _config_key + '_source_hosts') | unique }}"
    _ports: "{{ query('ahmadalli.ansible.listmerge', 'firewalld_' + _config_key + '_ports') | union(firewalld_all_zones_ports | default([], true)) | unique }}"
    _services: "{{ query('ahmadalli.ansible.listmerge', 'firewalld_' + _config_key + '_services') | union(firewalld_all_zones_services | default([], true)) | | unique }}"
    _rich_rules: "{{ query('ahmadalli.ansible.listmerge', 'firewalld_' + _config_key + '_rich_rules') | union(firewalld_all_zones_rich_rules | default([], true)) | | unique }}"
    _masquerade: "{{ lookup('vars', 'firewalld_' + _config_key + '_masquerade', default=false) }}"
    _target: "{{ lookup('vars', 'firewalld_' + _config_key + '_target', default='') }}"
  tags:
    - facts

- name: add _source_hosts to sources
  set_fact:
    _sources: "{{
      _sources |
      union(
        query('inventory_hostnames', (_source_hosts | default([inventory_hostname], true))) |
        map('extract', hostvars) |
        map(attribute='ansible_host') |
        difference([ansible_host])
      ) |
      unique }}"
  tags:
    - facts
- name: remove non-ip values from sources
  set_fact:
    _sources: "{{ _sources | ansible.netcommon.ipaddr }}"
  tags:
    - facts
- name: make all sources subnet
  set_fact:
    _sources: "{{ _sources | map('ansible.netcommon.ipsubnet') }}"
  tags:
    - facts
- name: generate redundant sources list
  set_fact:
    _redundant_sources: "{{ _redundant_sources | default([], true) | union(_sources | ansible.netcommon.ipaddr(item) | difference([item])) | unique }}"
  tags:
    - facts
  loop: "{{ _sources }}"
- name: remove redundant sources
  set_fact:
    _sources: "{{ _sources | difference(_redundant_sources) }}"
  tags:
    - facts

- name: ensure zone is present
  ansible.posix.firewalld:
    zone: "{{ _zone_name | mandatory }}"
    state: present
    permanent: yes
  when: not _is_default_zone
  notify: reload firewalld
  # we need to reload filrewalld in order to be able to configure the newly created zone
- name: run handlers immediately
  meta: flush_handlers

- name: add interfaces
  ansible.posix.firewalld:
    zone: "{{ _zone_name | default(omit, true) }}"
    interface: "{{ item }}"
    state: enabled
    permanent: yes
    immediate: yes
  loop: "{{ _interfaces }}"

- name: add sources
  ansible.posix.firewalld:
    zone: "{{ _zone_name | default(omit, true) }}"
    source: "{{ item }}"
    state: enabled
    permanent: yes
    immediate: yes
  loop: "{{ _sources }}"

- name: add ports
  ansible.posix.firewalld:
    zone: "{{ _zone_name | default(omit, true) }}"
    port: "{{ item }}"
    state: enabled
    permanent: yes
    immediate: yes
  loop: "{{ _ports }}"

- name: add services
  ansible.posix.firewalld:
    zone: "{{ _zone_name | default(omit, true) }}"
    service: "{{ item }}"
    state: enabled
    permanent: yes
    immediate: yes
  loop: "{{ _services }}"

- name: add rich rules
  ansible.posix.firewalld:
    zone: "{{ _zone_name | default(omit, true) }}"
    rich_rule: "{{ item }}"
    state: enabled
    permanent: yes
    immediate: yes
  loop: "{{ _rich_rules }}"

- name: setup masquerade
  ansible.posix.firewalld:
    zone: "{{ _zone_name | default(omit, true) }}"
    masquerade: yes
    state: enabled
    permanent: yes
    immediate: yes
  when: _masquerade

# todo: use `target` field when ansible.posix v1.2 was released.
# checkout https://github.com/ansible-collections/ansible.posix/issues/130 for more info
- name: setup target
  when: _target | length > 0
  vars:
    __zone_param: "{{ '--zone='+_zone_name if _zone_name | default('', true) | length > 0 else '' }}"
  block:
    - name: assert target value
      assert:
        that:
          - _target in ['default', 'ACCEPT', 'DROP', 'REJECT']
    - name: get target status
      command: 'firewall-cmd --permanent {{ __zone_param }} --get-target'
      changed_when: false
      register: __current_target
    - name: set target
      command: 'firewall-cmd --permanent {{ __zone_param }} --set-target={{ _target }}'
      when:
        - __current_target.stdout is defined
        - __current_target.stdout != _target | default('default')
      notify: reload firewalld
