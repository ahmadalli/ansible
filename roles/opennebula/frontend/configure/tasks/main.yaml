---
- name: include oned config variables
  ansible.builtin.include_vars: oned.yaml
- name: update oned configs
  ansible.builtin.template:
    src: oned-{{ opennebula_version }}.conf.j2
    dest: /etc/one/oned.conf
    mode: "0640"
    owner: root
    group: oneadmin
- name: update sunstone server configs
  ansible.builtin.template:
    src: sunstone-server-{{ opennebula_version }}.conf.j2
    dest: /etc/one/sunstone-server.conf
    mode: "0640"
    owner: root
    group: oneadmin
  notify: restart sunstone
- name: include oned kvm override variables
  ansible.builtin.include_vars: vmm_exec_kvm.yaml
- name: update kvm override configs
  ansible.builtin.template:
    src: vmm_exec_kvm-{{ opennebula_version }}.conf.j2
    dest: /etc/one/vmm_exec/vmm_exec_kvm.conf
    mode: "0640"
    owner: root
    group: oneadmin
- name: clear systemd overrides
  ansible.builtin.file:
    path: "{{ opennebula_frontend_systemd_unit_overrides_directory }}"
    state: absent
- name: create systemd overrides directory
  ansible.builtin.file:
    path: "{{ opennebula_frontend_systemd_unit_overrides_directory }}"
    state: directory
    owner: root
    group: root
    mode: "0644"
- name: configure systemd overrides
  ansible.builtin.copy:
    dest: "{{ opennebula_frontend_systemd_unit_overrides_directory }}/overrides.conf"
    owner: root
    group: root
    mode: "0644"
    content: |
      {% if opennebula_frontend_oned_configs_database_backend != 'sqlite' %}
      [Unit]
      After={{ opennebula_frontend_database_systemd_unit }}
      {% endif %}

      [Service]
      TimeoutSec=3600
- name: restart opennebula service
  ansible.builtin.systemd:
    name: opennebula
    daemon_reload: true
    enabled: true
    state: restarted
- name: check if opennebula service is started
  command: oneuser show
  register: oneuser_check
  failed_when: oneuser_check.rc > 0
  changed_when: false
- name: get public key
  tags:
    - facts
  slurp:
    src: /var/lib/one/.ssh/id_rsa.pub
  register: frontend_public_key
- name: propagate authorized key
  set_fact:
    cacheable: true
    opennebula_frontend_authorized_key: "{{ frontend_public_key['content'] | b64decode }}"
  tags:
    - facts
  delegate_to: "{{ item }}"
  delegate_facts: true
  with_items: "{{ groups['opennebula_node'] }}"
