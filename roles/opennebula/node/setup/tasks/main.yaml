---
- name: gather os specific variables
  ansible.builtin.include_vars: "{{ item }}"
  with_first_found:
    - "{{ ansible_distribution|lower }}.yaml"
    - "{{ ansible_os_family|lower }}.yaml"
    - default.yaml
  tags:
    - facts
- name: install opennebula node packages
  ansible.builtin.include_role:
    name: utils/os/package/manager
- name: remove virsh default network
  ansible.builtin.shell: virsh net-destroy default; virsh net-undefine default
  ignore_errors: true
- name: setup network
  ansible.builtin.include_role:
    name: utils/os/network/configure
# we do this because br_netfilter might get loaded in future and if it does, it'll ruin our connectivity without proper configs
- name: persist br_netfilter module
  ansible.builtin.lineinfile:
    path: /etc/modules
    regexp: ^br_netfilter$
    line: br_netfilter
- name: load br_netfilter module
  community.general.modprobe:
    name: br_netfilter
    state: present
# https://wiki.libvirt.org/page/Networking#Creating_network_initscripts
- name: disable netfilter on bridges
  ansible.posix.sysctl:
    name: "{{ item }}"
    reload: yes
    value: "0"
  loop:
    - net.bridge.bridge-nf-call-ip6tables
    - net.bridge.bridge-nf-call-iptables
    - net.bridge.bridge-nf-call-arptables
- name: setup glusterfs volume mount
  ansible.builtin.include_role:
    name: glusterfs/mount
- name: check state of datastore directory
  ansible.builtin.stat:
    path: /var/lib/one/datastores
  register: datastore_dir_stat
- name: remove current datastore dir if not link or pointing at wrong location
  file:
    state: absent
    path: /var/lib/one/datastores
  when: |
    not (datastore_dir_stat.stat.islnk | default(false, True))
    or datastore_dir_stat.stat.lnk_source != "{{ opennebula_node_datastore_glusterfs_mount_path }}/datastores"
- name: create datastore softlink
  ansible.builtin.file:
    src: "{{ opennebula_node_datastore_glusterfs_mount_path }}/datastores"
    dest: /var/lib/one/datastores
    owner: oneadmin
    group: oneadmin
    follow: no
    state: link
- name: config lvm to disable lvmetad
  ansible.builtin.lineinfile:
    path: /etc/lvm/lvm.conf
    regexp: use_lvmetad =.*
    line: use_lvmetad = 0
- name: disable and stop lvmetad
  ansible.builtin.systemd:
    name: lvm2-lvmetad.service
    enabled: false
    state: stopped
- name: get lvm disk stats
  community.general.parted:
    device: "{{ opennebula_datastore_lvm_device | mandatory }}"
    unit: MB
    state: info
  register: lvm_info
- name: check disk
  when: lvm_info.partitions | length > 0
  block:
    - name: check if partition has filesystem
      when: lvm_info.partitions[0].fstype | length > 0
      ansible.builtin.fail:
        msg: |
          the disk is already partitioned and {{ opennebula_datastore_lvm_device }}1 has filesystem
    - name: check if partition has lvm flag
      when: "'lvm' not in lvm_info.partitions[0].flags"
      ansible.builtin.fail:
        msg: |
          the disk is already partitioned but {{ opennebula_datastore_lvm_device }}1 doesn't have lvm flag
- name: create lvm parition
  community.general.parted:
    device: "{{ opennebula_datastore_lvm_device | mandatory }}"
    number: 1
    flags: [lvm]
    state: present
- name: create lvm group
  community.general.lvg:
    vg: vg-one-{{ opennebula_datastore_system_id }}
    pvs:
      - "{{ opennebula_datastore_lvm_device }}1"
- name: add frontend public key
  authorized_key:
    user: oneadmin
    key: "{{ opennebula_frontend_authorized_key }}"
    exclusive: yes
    state: present
    manage_dir: no
